profiles {
    // The following settings are used by the denglab cluster. Please change them to fit your cluster.
    // ex. binding path for singularity and charliecloud, queue name, clusterOptions, time limit, etc.
    singularity_denglab {
        singularity.runOptions = "--writable-tmpfs -B /project/genomics/jru/data2:/project/genomics/jru/data2"
    }
    charliecloud_denglab {
        charliecloud.runOptions = "-b /dss -b /gpfs"
    }
    slurm_hmgu {
        process.executor       = 'slurm'
        process.cpus           = { check_max( 1 * task.attempt, 'cpus') }
        process.memory         = { check_max( 2.GB * task.attempt, 'memory') }
        process.queue          = 'cpu_p'
        process.clusterOptions = '-q cpu'
        process.time           = { check_max( 12.h * task.attempt, 'time') }
    }
    slurm_lrz {
        process.executor       = 'slurm'
        process.cpus           = { check_max( 1 * task.attempt, 'cpus') }
        process.memory         = { check_max( 2.GB * task.attempt, 'memory') }
        process.queue          = 'serial_std'
        process.clusterOptions = '--clusters=serial'
        process.time           = { check_max( 12.h * task.attempt, 'time') }
    }
}

params {
    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '20.GB'
    max_cpus                   = 4
    max_time                   = '30.h'
}

process {
    withLabel: setup {
        cpus = 4
        memory = "20.GB"
        time = "30.h"
    }

    withName: DB_DRAM {
        cpus = 8
        memory = "40.GB"
        time = "30.h"
    }

    withName: DB_KRAKEN2 {
        cpus = 1
        memory = "4.GB"
        time = "10.h"
    }

    withName: DB_VIBRANT {
        cpus = 1
        memory = "4.GB"
        time = "10.h"
    }

    withName: DB_VIRSORTER2 {
        cpus = 1
        memory = "4.GB"
        time = "10.h"
    }

    withName: DB_VREFSEQ {
        cpus = 1
        memory = "4.GB"
        time = "10.h"
    }

    withName: ABRICATE {
        cpus = 1
        memory = "4.GB"
        time = "10.h"
    }

    withName: ABUNDANCE {
        cpus = 1
        memory = "5.GB"
        time = "10.h"
    }

    withName: BACPHLIP {
        cpus = 1
        memory = "2.GB"
        time = "10.h"
    }

    withName: CHECKV {
        cpus = 12
        memory = "40.GB"
        time = "30.h"
    }

    withName: CONTIGLIB {
        cpus = 12
        memory = "40.GB"
        time = "30.h"
    }

    withName: CONTIGLIB_CLUSTER {
        cpus = 12
        memory = "40.GB"
        time = "30.h"
    }

    withName: DECONTAM {
        cpus = 1
        memory = "5.GB"
        time = "10.h"
    }

    withName: DRAMV {
        cpus = 12
        memory = "40.GB"
        time = "30.h"
    }

    withName: DVF {
        cpus = 1
        memory = "4.GB"
        time = "20.h"
    }

    withName: EMAPPER {
        cpus = 12
        memory = "40.GB"
        time = "30.h"
    }

    withName: FASTQC {
        cpus = 1
        memory = "2.GB"
        time = "10.h"
    }

    withName: FASTP {
        ext.args = "-f 15 -t 1 -F 15 -T 1 --detect_adapter_for_pe -p -n 1 -l 30 -5 -W 4 -M 20 -r -c -g -x"
        cpus = 1
        memory = "2.GB"
        time = "10.h"
    }

    withName: GENEPRED {
        cpus = 8
        memory = "20.GB"
        time = "10.h"
    }

    withName: MAPPING2CONTIGS {
        cpus = 1
        memory = "4.GB"
        time = "10.h"
    }

    withName: MICOMPLETEDB {
        cpus = 4
        memory = "12.GB"
        time = "20.h"
    }

    withName: MULTIQC {
        cpus = 1
        memory = "2.GB"
        time = "10.h"
    }

    withName: NRSEQS {
        cpus = 2
        memory = "6.GB"
        time = "10.h"
    }

    withName: PHAMB_RF {
        cpus = 4
        memory = "12.GB"
        time = "20.h"
    }

    withName: REPLIDEC {
        cpus = 4
        memory = "12.GB"
        time = "20.h"
    }

    withName: SPADES {
        cpus = 6
        memory = "20.GB"
        time = "30.h"
    }

    withName: TAXONOMY_MERGE {
        cpus = 1
        memory = "4.GB"
        time = "10.h"
    }

    withName: TAXONOMY_MMSEQS {
        cpus = 6
        memory = "20.GB"
        time = "20.h"
    }

    withName: TAXONOMY_VCONTACT {
        cpus = 12
        memory = "40.GB"
        time = "40.h"
    }

    withName: VAMB {
        cpus = 12
        memory = "40.GB"
        time = "30.h"
    }

    withName: VIBRANT {
        cpus = 12
        memory = "40.GB"
        time = "30.h"
    }

    withName: VIRALHOST_IPHOP {
        cpus = 12
        memory = "40.GB"
        time = "40.h"
    }

    withName: VIRSORTER2 {
        cpus = 12
        memory = "40.GB"
        time = "40.h"
    }

    withName: VOGDB {
        cpus = 2
        memory = "10.GB"
        time = "20.h"
    }

    withName: VRHYME {
        cpus = 4
        memory = "12.GB"
        time = "20.h"
    }
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
